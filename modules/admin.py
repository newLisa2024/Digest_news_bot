import logging
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError
import config
from modules.subscriber_db import list_subscribers, remove_subscriber


async def cmd_list_subscribers(message: Message):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        subscribers = list_subscribers()
        if not subscribers:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.")
            return

        response = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b>\n"
        for sub in subscribers:
            response += f"üÜî ID: {sub.get('user_id', '---')}, üë§ Username: @{sub.get('username', '---')}\n"

        await message.answer(response, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_list_subscribers: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")


async def cmd_remove_subscriber(message: Message):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <user_id>")
            return

        user_id = int(parts[1])
        remove_subscriber(user_id)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ —Å ID {user_id} —É–¥–∞–ª—ë–Ω.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_remove_subscriber: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")


async def cmd_send_message(message: Message):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send <user_id> <—Ç–µ–∫—Å—Ç>")
            return

        user_id = int(parts[1])
        text = parts[2]
        await message.bot.send_message(chat_id=user_id, text=text)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_send_message: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")


async def cmd_broadcast(message: Message):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        text = message.text.split(maxsplit=1)[1]
        subscribers = list_subscribers()
        if not subscribers:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.")
            return

        success, failed = 0, 0
        for sub in subscribers:
            try:
                await message.bot.send_message(chat_id=sub["user_id"], text=text)
                success += 1
            except Exception:
                failed += 1

        await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_broadcast: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")